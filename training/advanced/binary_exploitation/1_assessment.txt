A. Linux Fundamentals

1. Which among these are not a service provided by an operating system?
Resource management
I/O devices management
Security
[x] Internet services
Error detection
2. A file has this permission: "-rwxr-xr--". What would be the command to set this permission on a file?
chmod 545 filename
chmod 744 filename
[x] chmod 754 filename
chmod 414 filename
chmod 777 filename
3. What is the primary difference between stack and heap?
Stack is for large data, heap is for small data
Stack and heap are the same
Stack always grows upwards, heap always grows downwards
[x] Stack is static, heap is dynamic
Stack stores global variables, heap stores local variables
4. Which of these lines of code stores data on the heap?
[x] int *ptr = (int*) malloc(sizeof(int));
char str[] = "Hello";
int numbers[5] = {1, 2, 3, 4, 5};
float b = 3.14;
int x = 10;
5. Which of the following statements about system calls is TRUE?
System calls run in User Mode like normal functions
[x] System calls provide an interface between user applications and the operating system
System calls do not require switching from User Mode to Kernel Mode
System calls allow user programs to directly access hardware
System calls execute faster than normal function calls because they interact directly with the CPU

CDDC2025{m4gic_*********_******_*********}


B. Shellcode

1. Which number represents the file descriptor for "stderror"?
3
1
0
[x] 2
4
2. When calling a syscall in x86-64 architecture, where do you put the syscall number?
rdx
rdi
eax
rsi
[x] rax
3. What is the system call number for execve in x86 architecture?
0xa
0x10
[x] 0xb
0x11
0x12
4. I have the data "91f6275d" in big-endian. What is the little-endian representation?
5d726f19
[x] 5d27f691
91f6275d
d5726f19
275d91f6
5. Which of the following assembly code lines executes the syscall?
[x] int 0x80
push eax
mov al, 0xb
push 0x68732f2f
xor eax, eax

CDDC2025{*****_happ3n1ng_******_*********}


C. Buffer Overflow

1. What is a buffer?
A barrier between kernel and shell
A physical storage device
A barrier between heap and stack
A permanent storage space
[x] A temporary storage space
2. What does the return address contain?
the memory address where the function starts
the memory address where the program instructions are located
[x] the memory address where execution should resume after the function call returns
the memory address that returns the data needed for a function's operation
the memory address where execution should be done when a program is run
3. What happens when the return address of a function is overwritten?
The program returns the overwritten value to stdout
The program returns back to the beginning of the main() function
[x] You can control what value gets printed in the output
The program returns a compile-time error
You can control what code gets executed after the function returns
4. What does the code strcpy(buffer, s); do?
Copies the string from buffer into s
Trim the string buffer until length s
[x] Copies the string from s into buffer
Trim the string s until length buffer
Prints both buffer and s to stdout
5. If we declare char buffer[5];, what is the longest string we can put there without causing overflow?
"AAAAA"
"A"
[x] "AAAA"
"AA"
"AAA"

CDDC2025{*****_*********_in51de_*********}


D. Understanding Heap Bugs

1. What Linux tool is useful to debug C/C++ codes and analyze buffer overflows?
[x] gdb
bless
frida
clang
gcc
2. When a buffer overflow happens in the heap, it typically overwrites...
Random memory space outside the heap
[x] Higher address memory
Lower address memory
Random memory space inside the heap
Overflow is not possible
3. When does a use-after-free bug happen?
[x] When a program continues to use a pointer to a memory block after it has been freed
When a program crashes and returns a segmentation fault error
When a program lets a function read beyond the buffer size
When a program continues to run a process after it has been killed
When a program lets a function overwrite its return value
4. If you dynamically allocate a space with malloc(0x10), then you free it with free(), then allocate a space again with malloc(0x10), where will that space be located in the memory?
16 Bytes After The Freed Space
16 Bytes Before The Freed Space
10 Bytes After The Freed Space
10 Bytes Before The Freed Space
[x] The Exact Same Place As The Freed Memory
5. A program dynamically allocates memory with malloc(), writes some data into it, frees the memory, and then allocates a new block of the same size with malloc(). What is the most likely content of the newly allocated space?
A Bunch Of \xFF's
A Bunch Of \x41's
The Data From Other Memory Space
A Bunch Of \x00's
[x] The Previous Space's Data

CDDC2025{*****_*********_******_c0mputer5}

Flag: CDDC2025{m4gic_happ3n1ng_in51de_c0mputer5}