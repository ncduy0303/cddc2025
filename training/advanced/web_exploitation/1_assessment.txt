A. Client Side Security

1. What does CSRF stands for?
Client-Side Request Forgery
[x] Cross-Site Request Forgery
Server-Side Request Forgery
External-Site Request Forgery
Cross-Site Forging Script
2. A website has a vulnerability that allows an attacker to submit a post containing an XSS payload. When other users visit the post, a pop-up alert appears. What type of XSS is this?
DOM-based XSS
[x] Stored XSS
Reflected XSS
Injectional XSS
Mirror XSS
3. An attacker tries to input the payload `<img src="x" onerror="alert('1')">` into an HTML form. What vulnerability are they testing?
LFI
SQL Injection
SSRF
CSRF
[x] XSS
4. What causes a CSRF vulnerability?
The website fails to check if a user is authorised to see certain contents
The website does not validate if a user session is valid
The website has no limitation on how many requests a user can send
The website does not sanitize user input properly
[x] The website blindly trusts any request that includes a valid session, regardless of its source
5. Which of these URLs are potentially exploitable using Open Redirect vulnerability?
https://coolsite.com/display?usrinput=hello
https://coolsite.com/contents?file=materials.pdf
https://coolsite.com/register?username=user&password=12345
https://coolsite.com/deleteAccount?session=374e76f3a8586aa0698efe02d450283e
[x] https://coolsite.com/login?redirect=https://coolsite.com/dashboard

CDDC2025{s1mpl3_************_****}


B. Server Side Security (1)

1. What is an injection vulnerability?
A vulnerability where the website's data becomes corrupted
[x] A vulnerability where a user's input causes unintended behavior in the processing process
A vulnerability where multiple requests causes the website to crash
A vulnerability where the users sensitive information are leaked to the public
A vulnerability where an attacker could bypass authentication
2. When does an attacker perform a blind SQL injection?
When the webserver version is unknown
When the attacker couldn't see the SQL code
When it's impossible to get a server response
When the database version is unknown
[x] When database errors are not directly shown
3. Which of the following website features is most likely to be vulnerable to SQL Injection?
Liking another user's comment
Deleting an account
[x] Searching for other users by their username
Uploading a profile picture
Clicking a button that takes the user to another site
4. A login form has fields for "username" and "password". An attacker injects a payload `' union select “admin”, “abcd”#` and get an error. Then, the attacker injects another payload `' union select “admin”, “abcd”, "efgh"#` and it works successfully. What can be inferred from this scenario?
[x] The database table for user contains 3 columns
The password field must not be left empty
The query has to reach a certain length to be successful
The database table for user contains 4 columns
The database table for user contains 2 columns
5. How can we protect our servers from SQL injection attacks?
Store passwords in plain text to improve query efficiency
Disable all database logs to prevent information leakage
Use only client-side validation to filter inputs
[x] Use prepared statements and parameterized queries
Allow users to input raw SQL queries for flexibility

CDDC2025{******_3xpl0it4tion_****}


C. Server Side Security (2)

1. Which of the following vulnerabilities allow an attacker to explore the server's internal network?
Insecure Direct Object Reference (IDOR)
Cross-Site Scripting (XSS)
[x] Server-Side Request Forgery (SSRF)
Local File Inclusion (LFI)
SQL Injection (SQLi)
2. Which Python module is known for its simplicity and ease of use when sending HTTP requests?
os
http
php-curl
[x] requests
libnum
3. Which of the following features are most likely to be susceptible to SSRF attacks?
Searching for other users by their username
Profile picture upload from user's local file
Deleting a blog post
[x] Profile picture upload from URL
Liking a post
4. What does the payload on this URL do? `https://example.com/profilepic.php?url=https://ifconfig.pro/`
It fetches the attacker's profile picture
It returns the server's internal files
It returns the attacker's IP address
It fetches the attacker's malicious code
[x] It returns the server's IP address
5. How can we protect our servers from SSRF attacks?
Allow internal network requests from user input
Rely only on client-side validation to filter URLs
Disable unnecessary URL fetching functionality
Use user-provided URLs without validation
[x] Implement an allowlist for permitted external URLs

CDDC2025{******_************_g4me}

Flag: CDDC2025{s1mpl3_3xpl0it4tion_g4me}